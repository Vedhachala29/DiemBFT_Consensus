import random
import math
from constants import *

class LeaderElection:
    def __init__(self, modules_map, window_size:int, exclude_size: int) -> None:
        self.modules_map = modules_map
        self.validators = self.modules_map['validators_list']
        self.window_size = window_size
        self.exclude_size = exclude_size
        self.reputation_leaders = {}

    def election_reputation_leader(self, QC):
        active_validators = set()
        last_authors = set()                                            #Check if this is an ordered set or a set or list
        current_qc = QC
        iter=0
        while iter < self.window_size and len(last_authors) < self.exclude_size and current_qc.blockid:
            current_block = self.modules_map[LEDGER].committed_block(current_qc.vote_info.parent_id)
            block_author =  current_block.author
            if iter < self.window_size :
                active_validators.add(current_qc.vote_info.id)            #current_qc.signatures.signers()
            if len(last_authors) < self.exclude_size:
                last_authors.add(block_author)
            current_qc = current_block.qc
            iter=iter+1
        return random.choice(tuple(active_validators))                              # Random choice from the tuple of active_validators

    def update_leader(self, QC):
        if not QC or not QC.vote_info:
            return
        extended_round = QC.vote_info.parent_round
        qc_round = QC.vote_info.round
        current_round = self.modules_map[PACEMAKER].current_round

    def get_leader(self, round:int):
        if round in self.reputation_leaders and self.reputation_leaders[round] is not None:
           return self.reputation_leaders[round] # check what is returned
        else:
            return math.floor(round) % len(self.validators)
    