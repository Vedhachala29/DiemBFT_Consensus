import sys
from messages import TC

class PaceMaker:
    def __init__(self, modules_map):
        self.modules_map = modules_map
        self.delta = 1
        self.current_round = 0
        self.last_round_tc = TC(-1, [-1], None)
        self.pending_timeouts = []                  #TODO value?

    def get_round_timer(self):
        return 4 * self.delta                  #4 sec timer for each round

    def start_timer(self, new_round):
        self.current_round = new_round

    def process_remote_timeout(self, timeout_msg):
        timeout_info = timeout_msg.timeout_info
        if timeout_info.round < self.current_round:
            return None
        
        # Implement the rest of process_remote_timeout when we are testing timeout certificates.

    def advance_round_tc(self, tc):
        if tc is None or tc.round < self.current_round:
            return False
        self.last_round_tc = tc
        self.start_timer(tc.round + 1)              # Uncomment later when you are testing with timeouts
        return True

    def advance_round_qc(self, qc) :
        if qc == None or qc.vote_info.round < self.current_round:
            return False
        self.last_round_tc = TC(-1, [-1], None)
        self.start_timer(qc.vote_info.round + 1)    #Uncomment later when you are testing with timeouts
        return True