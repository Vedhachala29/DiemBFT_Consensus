import sys


class PaceMaker:
    def __init__(self, modules_map):
        self.modules_map = modules_map
        self.delta = 100
        self.current_round = 0
        self.last_round_tc = None
        self.pending_timeouts = []                  #TODO value?

    def get_round_timer(self, r:int):
        return 4 * self.delta                       #TODO case for unknown delta

    def start_timer(self, new_round):
        # stop_timer(self.current_round)

        self.current_round = new_round
        #Start local timer for round current_round for duration get_round_timer(current_round)

    def process_remote_timeout(self, timeout_msg):
        timeout_info = timeout_msg.timeout_info
        if timeout_info.round < self.current_round:
            return None

        # Implement the rest of process_remote_timeout when we are testing timeout certificates.

    def advance_round_tc(self, tc):
        if tc is None or tc.round < self.current_round:
            return False
        self.last_round_tc = tc
        self.start_timer(tc.round + 1)              # Uncomment later when you are testing with timeouts
        return True

    def advance_round_qc(self, qc) :
        # print('in pace maker', qc.vote_info.round)
        if qc == None or qc.vote_info.round < self.current_round:
            return False
        
        self.last_round_tc = None
        self.start_timer(qc.vote_info.round + 1)    #Uncomment later when you are testing with timeouts
        return True