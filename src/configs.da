from failure_config import Failure, FailureConfig, FailType
from messages import MsgType

configs =  [
    {'sq_num':1, 'nclients': 1, 'nreplicas': 1, 'nfaulty': 0, 'timeout': 30, 'numMessages' : 1,
    'failure': None, 'delta': 2},

    {'sq_num':2, 'nclients': 1, 'nreplicas': 4, 'nfaulty': 1, 'timeout': 30, 'numMessages' : 2,
    'failure': None, 'delta': 2},

    {'sq_num':3, 'nclients': 3, 'nreplicas': 7, 'nfaulty': 2, 'timeout': 30, 'numMessages' : 5,
    'failure': None, 'delta': 2},
    
    {'sq_num':4, 'nclients': 2, 'nreplicas': 5, 'nfaulty': 1, 'timeout': 30, 'numMessages' : 2,
    'failure' : FailureConfig(failures = [
    Failure(src='_',dest='leader',msg_type=MsgType.VOTE,round=1,prob=1,fail_type=FailType.Delay, val=9),
    Failure(src=2,dest='_',msg_type='_',round=3,prob=0.5,fail_type=FailType.MsgLoss),
    Failure(src=4,dest='_',msg_type=MsgType.VOTE,round=3,prob=0.5,fail_type=FailType.SetAttr,val=2,
    attr='highest_vote_round')],seed = 12345678), 'delta': 2
    },

    {'sq_num':5, 'nclients': 5, 'nreplicas': 7, 'nfaulty': 2, 'timeout': 30, 'numMessages' : 2,
    'failure' : FailureConfig(failures = [
    Failure(src='_',dest='leader',msg_type=MsgType.VOTE,round=1,prob=1,fail_type=FailType.Delay, val=9),
    Failure(src=2,dest='_',msg_type='_',round=3,prob=0.5,fail_type=FailType.MsgLoss),
    Failure(src=5,dest='_',msg_type=MsgType.VOTE,round=3,prob=0.5,fail_type=FailType.SetAttr,val=2,
    attr='current_round'),
    Failure(src=6,dest='_',msg_type=MsgType.VOTE,round=3,prob=0.5,fail_type=FailType.SetAttr,val=2,
    attr='highest_vote_round')],seed = 12345678), 'delta': 2
    },

    {'sq_num':6, 'nclients': 5, 'nreplicas': 4, 'nfaulty': 1, 'timeout': 30, 'numMessages' : 2,
    'failure' : FailureConfig(failures = [
    Failure(src='_',dest='leader',msg_type=MsgType.VOTE,round=1,prob=1,fail_type=FailType.Delay, val=9),
    Failure(src=2,dest='_',msg_type='_',round=3,prob=0.5,fail_type=FailType.MsgLoss),
    Failure(src=3,dest='_',msg_type=None,round=3,prob=1,fail_type=FailType.SetAttr,val=6,
    attr='high_qc.round')],seed = 12345678),
     'delta': 2
    },

    # # In two consecutive rounds(3,4) three out of four replicas will timeout 
    # # and will sync up from 6th round(committing all pending transactions)
    {'sq_num':7, 'nclients': 5, 'nreplicas': 4, 'nfaulty': 0, 'timeout': 100, 'numMessages' : 2,
    'failure' : FailureConfig(failures = [
    Failure(src=1,dest='leader',msg_type=MsgType.VOTE,round=3,prob=1,fail_type=FailType.Delay, val=15),
    Failure(src=2,dest='leader',msg_type=MsgType.VOTE,round=3,prob=1,fail_type=FailType.Delay, val=15),
    Failure(src=3,dest='leader',msg_type=MsgType.VOTE,round=3,prob=1,fail_type=FailType.Delay, val=15),
    Failure(src=0,dest='leader',msg_type=MsgType.VOTE,round=4,prob=1,fail_type=FailType.Delay, val=15),
    Failure(src=2,dest='leader',msg_type=MsgType.VOTE,round=4,prob=1,fail_type=FailType.Delay, val=15),
    Failure(src=3,dest='leader',msg_type=MsgType.VOTE,round=4,prob=1,fail_type=FailType.Delay, val=15)],seed = 12345678),
     'delta': 2
    },

    # #It is an extension of previous test case by introducing byzantine nodes and msg loss. 
    # #After two consecutive timeouts in non faulty nodes in rounds 3 and 4, commit is happening despite byzantine nodes
    # #not participating in the vote due to attribute change.
    {'sq_num':8, 'nclients': 5, 'nreplicas': 7, 'nfaulty': 2, 'timeout': 100, 'numMessages' : 2,
    'failure' : FailureConfig(failures = [
    Failure(src=0,dest='leader',msg_type=MsgType.VOTE,round=3,prob=1,fail_type=FailType.MsgLoss, val=15),
    Failure(src=1,dest='leader',msg_type=MsgType.VOTE,round=3,prob=1,fail_type=FailType.MsgLoss, val=15),
    Failure(src=2,dest='leader',msg_type=MsgType.VOTE,round=3,prob=1,fail_type=FailType.MsgLoss, val=15),
    Failure(src=0,dest='leader',msg_type=MsgType.VOTE,round=4,prob=1,fail_type=FailType.MsgLoss, val=15),
    Failure(src=1,dest='leader',msg_type=MsgType.VOTE,round=4,prob=1,fail_type=FailType.MsgLoss, val=15),
    Failure(src=2,dest='leader',msg_type=MsgType.VOTE,round=4,prob=1,fail_type=FailType.MsgLoss, val=15),
    Failure(src=5,dest='_',msg_type='Propose',round=6,prob=1,fail_type=FailType.SetAttr,val=7,
    attr='highest_vote_round'),
    Failure(src=6,dest='_',msg_type='Propose',round=6,prob=0.5,fail_type=FailType.SetAttr,val=7,
    attr='highest_vote_round')],seed = 12345678), 'delta': 2
    },

    #Byzantine leader
    {'sq_num':9, 'nclients': 5, 'nreplicas': 4, 'nfaulty': 1, 'timeout': 100, 'numMessages' : 2,
    'failure' : FailureConfig(failures = [
    Failure(src=3,dest='_',msg_type='_',round=2,prob=1,fail_type=FailType.ByzatineNoPropose,val=None,
    attr=None)],seed = 12345678), 'delta': 2
    },

    #dedup transactions test
    {'sq_num':10, 'nclients': 5, 'nreplicas': 4, 'nfaulty': 1, 'timeout': 8, 'numMessages' : 2,
    'failure' : FailureConfig(failures = [
    Failure(src=3,dest='_',msg_type='_',round=3,prob=1,fail_type=FailType.ByzatineNoPropose,val=None,
    attr=None)],seed = 12345678), 'delta': 2
    },

    {'sq_num':11, 'nclients': 5, 'nreplicas': 4, 'nfaulty': 1, 'timeout': 8, 'numMessages' : 2,
    'failure' : FailureConfig(failures = [
    Failure(src=3,dest='_',msg_type='_',round='_',prob=1,fail_type=FailType.MsgLoss,val=None,
    attr=None)],seed = 12345678), 'delta': 2
    },

    {'sq_num':12, 'nclients': 5, 'nreplicas': 3, 'nfaulty': 1, 'timeout': 8, 'numMessages' : 2,
    'failure' : FailureConfig(failures = [
    Failure(src=2,dest='_',msg_type='_',round='_',prob=1,fail_type=FailType.MsgLoss,val=None,
    attr=None)],seed = 12345678), 'delta': 2
    }
]
