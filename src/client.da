import threading

from cryptography import Cryptography
from logger_util import LOGGER


class Client(process):

    def setup(config, config_id: int, client_id: int, validators: list, private_key, public_keys_validators):

        LOGGER.replicas = validators
        LOGGER.process_id = "client_" + str(client_id)
        LOGGER.filename = '../logs/config' + str(config_id) \
            + '/' + LOGGER.process_id + ".log"

        LOGGER.log_action("Initial configuration", config)

        self.pending_success_results = dict()
        self.pending_fail_results = dict()
        self.received_sufficient_responses = set()
        self.sleep_time = config['sleeptime']
        self.nops = config['nclientops']
        self.f = config['nfaulty']

        Cryptography.private_key = self.private_key

    def send_request(request):
        signed_req = Cryptography.sign_message(request)

        send(('Request', signed_req), to=validators)
        LOGGER.log_event("Sent", "Request", request, validators)

        # Wait until clienttimeout
        timer = threading.Timer(config['clienttimeout'], retransmit_request, args=(
            request, self.pending_success_results, self.f))
        timer.start()

    def run():
        for i in range(nops):
            request_id = str(client_id) + "_" + str(i)
            pending_success_results[request_id] = list()
            pending_fail_results[request_id] = list()
            request = {
                'req_id': request_id,
                'command': str(client_id) + "-" + str(i)
            }
            send_request(request)

        # Wait until we have received valid (f+1) responses for all its requests
        await(len(received_sufficient_responses) == nops)

        send(('Done',), to=parent())
        LOGGER.log_event("Sent", "Done", None, parent())

    def receive(msg=('Response', resp), from_=validator):
        LOGGER.log_event("Received", "Response", resp, validator)

        req_id = resp['req_id']
        resp_status = resp['resp_status']
        if resp_status == "success":
            pending_success_results[req_id].append(resp)
            if len(pending_success_results[req_id]) == self.f + 1:
                received_sufficient_responses.add(req_id)
                LOGGER.log_action("Received f + 1 valid responses", req_id)
        else:
            pending_fail_results[req_id].append(resp)
            if len(pending_fail_results[req_id]) == self.f + 1:
                received_sufficient_responses.add(req_id)
                LOGGER.log_action("Received f + 1 valid responses", req_id)

    def retransmit_request(req, pending_success_results, f):
        if len(pending_success_results[req['req_id']]) < f + 1:
            # Retransmit request if did not receive f+1 responses
            LOGGER.log_action("Retransmitting Request", req)
            pending_success_results[req['req_id']].clear()
            send_request(req)
